#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace webignition\DockerTcpCliProxy\Bin;

const VERSION = 'dev-master';

$pharPath = \Phar::running(false);

if ('' === $pharPath) {
    require 'vendor/autoload.php';
} else {
    require 'phar://server.phar/vendor/autoload.php';
}

use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Socket\Raw\Exception;
use webignition\DockerTcpCliProxy\Server;

pcntl_async_signals(true);

$running = true;
pcntl_signal(SIGINT, function () use (&$running) {
    $running = false;
});

try {
    $server = Server::create('0.0.0.0', 8000);

    while ($running) {
        $server->handleClient();
    }

    $server->stopListening();
} catch (Exception $socketException) {
    $exceptionLogger = new Logger('tcp-cli-proxy-stderr', [
        new StreamHandler('php://stderr', Logger::DEBUG)
    ]);

    $exceptionLogger->error('ListenSocket::create() failed: ' . $socketException->getMessage(), [
        'file' => __FILE__,
        'line' => __LINE__,
        'trace' => $socketException->getTraceAsString(),
    ]);
}
