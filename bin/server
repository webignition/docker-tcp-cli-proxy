#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace webignition\DockerTcpCliProxy\Bin;

const VERSION = 'dev-master';

$pharPath = \Phar::running(false);

if ('' === $pharPath) {
    require 'vendor/autoload.php';
} else {
    require 'phar://server.phar/vendor/autoload.php';
}

use Socket\Raw\Factory;

// @todo: handle exceptions in #14 (as a consequence of _create_, _bind, _listen)
$listenSocket = (new Factory())->createServer('tcp://0.0.0.0:8000');

do {
    // @todo: handle exceptions in #14 (as a consequence of _accept)
    $communicationSocket = $listenSocket->accept();

    do {
        // @todo: handle exceptions in #14 (as a consequence of _read)
        $buffer = $communicationSocket->read(2048, PHP_NORMAL_READ);
        $buffer = trim($buffer);

        if ('' === $buffer) {
            continue;
        }

        if ($buffer == 'quit') {
            break;
        }

        $command = $buffer;
        $commandOutput = [];
        $commandExitCode = null;

        exec($command, $commandOutput, $commandExitCode);

        // @todo: handle exceptions in #14 (as a consequence of _write)
        $communicationSocket->write((string) $commandExitCode . "\n");
        // @todo: handle exceptions in #14 (as a consequence of _write)
        $communicationSocket->write(implode("\n", $commandOutput) . "\n");
    } while (true);

    // @todo: handle exceptions in #14 (as a consequence of _shutdown)
    $communicationSocket->shutdown();
    $communicationSocket->close();
} while (true);

// @todo: handle exceptions in #14 (as a consequence of _shutdown)
$listenSocket->shutdown();
$listenSocket->close();
